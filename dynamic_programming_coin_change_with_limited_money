class Solution(object):
    def checkCashRegister(self, price, cash, cid):
        from collections import Counter
        coinsCounter = Counter()
        for pair in cid:
            coinsCounter[int(pair[0]*100)] = int(pair[1]/pair[0])
        coins = list(coinsCounter.elements())
        coins.sort(reverse=True)
# coins records each of the coin, from high to low
        total = int((cash - price) * 100)
        MAX = float('inf')
        combos = [{} for _ in range(total+1)]

        for i in range(1, total+1):
            for coin in coins:
                if i - coin < 0:
                    continue
                if i - coin == 0:
                    combos[i] = {coin: 1}
                    break
                if i - coin > 0 and combos[i-coin] != {}:
                    combos[i-coin].setdefault(coin, 0)
                    if combos[i-coin][coin] + 1 > coinsCounter[coin]:
                        continue
                    for c, n in combos[i-coin].items():
                        combos[i][c] = n
                    combos[i][coin] += 1
                    break

        res100 = combos[total]
        actualres = []
        for c,n in res100.items():
            actualres.append((c/100, n))
        return sorted(actualres, reverse=True)


def test():
    price = 0.26
    cash = 250
    cid = [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER",4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20],
          ["TWENTY", 60], ["ONE HUNDRED", 100]]
    moneys = {"PENNY": 0.01, "NICKEL": 0.05, "DIME": 0.1, "QUARTER": 0.25, "ONE": 1, "FIVE": 5, "TEN": 10, "TWENTY": 20,
              "ONE HUNDRED": 100}
    new_cid = []
    for a, b in cid:
        new_cid.append([moneys[a], b])
    sol = Solution()
    c = sol.checkCashRegister(price,cash,new_cid)
    print(c)
    summ = 0
    for c, n in c:
        summ += c * n
    print(summ)


if __name__ == '__main__':
    test()
