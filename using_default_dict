class Solution(object):
    

    def gridIllumination(self, N, lamps, queries):
        from collections import defaultdict
        """
        :type N: int
        :type lamps: List[List[int]]
        :type queries: List[List[int]]
        :rtype: List[int]
        """
        ans = []
        lampsOn = set(tuple(lamp) for lamp in lamps)
        
        xs, ys, x_plus_y, x_minus_y = defaultdict(int), defaultdict(int), defaultdict(int), defaultdict(int)
        
        for p, q in lampsOn:
            xs[p] += 1
            ys[q] += 1
            x_plus_y[p+q] += 1
            x_minus_y[p-q] += 1
            
        for x, y in queries:
            if xs[x] > 0 or ys[y] > 0 or x_plus_y[x+y] > 0 or x_minus_y[x-y] >0:
                ans.append(1)
            else:
                ans.append(0)
            
            for i in range(x-1, x+2):
                for j in range(y-1, y+2):
                    if (i,j) in lampsOn:
                        lampsOn.remove((i,j))
                        xs[i] -= 1
                        ys[j] -= 1
                        x_plus_y[i-j] -= 1
                        x_plus_y[i+j] -= 1
        
        return ans
        
        '''
        On a N x N grid of cells, each cell (x, y) with 0 <= x < N and 0 <= y < N has a lamp.

Initially, some number of lamps are on.  lamps[i] tells us the location of the i-th lamp that is on.  Each lamp that is on illuminates every square on its x-axis, y-axis, and both diagonals (similar to a Queen in chess).

For the i-th query queries[i] = (x, y), the answer to the query is 1 if the cell (x, y) is illuminated, else 0.

After each query (x, y) [in the order given by queries], we turn off any lamps that are at cell (x, y) or are adjacent 8-directionally (ie., share a corner or edge with cell (x, y).)

Return an array of answers.  Each value answer[i] should be equal to the answer of the i-th query queries[i].
        '''
        
# Note 1: 
        '''
        a = defaultdict(int)
        a[1] += 1 
        相当于
        a = dict()
        a.setdefault(1, 0)
        a[1]+=1
        '''
        
        '''
        a = defaultdict([])
        a[1].append(1)
        相当于
        a = dict()
        a.setdefault(1, [])
        a[1].append(1)
        '''
# Note 2:
      '''
      使用字典，而不是一个数组的组来记录灯泡的亮度。这样就不需要从N平方次循环来修改节点的值。
      本题中提取出了与解题相关的四个字典：
      xs, ys, x_plus_y, x_minus_y
      '''
                
    
    

    
        
